// Copyright (c) 2006-2010 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
// $FILENAME.cpp
// This file was generated automatically from the template eventteststepsource.tmpl
// on $GENERATE_TIME_STAMP
// Implementation of test step $CLASSNAME.
// 
//

/**
 @file 
 @internalComponent
*/

#include "$FILENAME.h"
#include <TEFSharedData.h>
#include <bluetooth\hci\$EVENTFILENAME.h>

#include <bluetooth\hci\hardwareerrorevent.h>
#include <bluetooth\hci\hciopcodes.h>
#include <bluetooth\hci\writevoicesettingcompleteevent.h>


$CLASSNAME::$CLASSNAME()
	{
	SetTestStepName(K${TESTSTEPNAME});
	}

$CLASSNAME::~$CLASSNAME()
	{
	}

TVerdict $CLASSNAME::doTestStepL()
	{
	if(TestStepResult() != EPass)
		{
		return TestStepResult();
		}

	SetTestStepResult(EFail);
	
$EVENTINITPARAMS
	$EVENTNAME* event = new $EVENTNAME($EVENTPARAMS);
	CleanupStack::PushL(event);

	if(event->ErrorCode() != EOK)
		{
		return TestStepResult();
		}

	if(event->EventCode() != $EVENTCODE)
		{
		return TestStepResult();
		}

$CHECK_EVENT_ACCESSORS

	$EVENTNAME::Cast(*event);

	// Will panic if not THardwareErrorEvent
	THardwareErrorEvent::Cast(*event);
	
	// Will panic if not TWriteVoiceSettingCompleteEvent
	TWriteVoiceSettingCompleteEvent::Cast(*event);

	CleanupStack::PopAndDestroy(1);
	SetTestStepResult(EPass);
	return TestStepResult();
	}
