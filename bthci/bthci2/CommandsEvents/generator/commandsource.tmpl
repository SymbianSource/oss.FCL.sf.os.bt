// Copyright (c) 2006-2010 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
// This file was generated automatically from the template commandsource.tmpl
// on $GENERATE_TIME_STAMP
// 
//

/**
 @file
 @internalComponent
*/

#include <bluetooth/hci/$FILENAME.h>
#include <bluetooth/hci/event.h>
#include <bluetooth/hci/commandcompleteevent.h>
#include <bluetooth/hci/hciframe.h>
#include <bluetooth/hci/hciopcodes.h>
$EVENT_MATCH_INCLUDES

#ifdef __FLOG_ACTIVE
_LIT8(KLogComponent, LOG_COMPONENT_COMMANDSEVENTS_SYMBIAN);
#endif

$PRAGMA_HW_VOICE_SETTING_ADVICE

// Factory methods

$NEWL_IMPLEMENTATIONS

// Constructors

$CONSTRUCTOR_IMPLEMENTATIONS

// Destructor
$CLASSNAME::~$CLASSNAME()
	{
	$DESTRUCTOR_IMPLEMENTATION
	}	

$EVENT_MATCH_IMPLEMENTATIONS

// Override of pure virtual from CHCICommandBase. This method embodies the knowledge
// of how to format the specifics of this command into the HCTL command frame.
void $CLASSNAME::Format($COMMANDFRAME) const
	{
	$WRITE_FRAME
	}

// Assign new values to the parameters of this command
EXPORT_C void $CLASSNAME::Reset($PARAMETERS)
	{
	$MEMBER_ASSIGNMENT
	}

// Accessor methods for the parameters of the command

$ACCESSOR_IMPLEMENTATIONS

// Extension function.  Use this to retrieve any extension interfaces from $CLASSNAME
// or any class from which it derives.
/*virtual*/ TInt $CLASSNAME::Extension_(TUint aExtensionId, TAny*& aInterface, TAny* aData)
	{
	// To add an additional interface implementation specific for this class check the 
	// provided ID and return an appropriate interface.

	// If a specific interface implementation is not provided - forward the call to the base class.
	return CHCICommandBase::Extension_(aExtensionId, aInterface, aData);
	}

