//
// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//


RUN_UTILS	MkDir	${SYSDRIVE}\bluetooth\
RUN_UTILS	MkDir	${SYSDRIVE}\bluetooth\tbtsockapi\

LOAD_SUITE	T_BTSockAPI
DELAY		2000


//! @file
//! @SYMTestSuiteName		BT-USER-SOCK-PublicApi-Unconnected
//! @SYMScriptTestEnvironment	This test script requires a basic ROM with bluetooth dongle.


// ****************************************************************************
// CBluetoothSocket
// **************************************************************************** 

// Service side unconnected tests

//Standard construction


START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0001
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0001
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket using the Standard Bluetooth socket NewL constructor.
//!				Uses API elements: NewL()1
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Call the first NewL of the CBluetoothSocket class
//!				3. Destroy object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Object created successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0001-0001command2NewL
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0001



//!START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0002
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0002
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket using the Standard Bluetooth socket NewL constructor, but with no session on the socket server
//!				Uses API elements: NewL()1
//! @SYMTestActions    		1. Call the first NewL of the CBluetoothSocket class without a session open on the socket server
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Leave, unable to create a socket
//! @SYMTestType		CIT
//!	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
//!			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
//!			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0002-0001command1NewL
//!			COMMAND		CBluetoothSocket1	~
//!	END_TEST_BLOCK	!PanicCode=0	!PanicString=KERN-EXEC
//!END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0002



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0003
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0003
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket using the Standard Bluetooth socket NewLC constructor.
//!				Uses API elements: NewLC()1
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Call the first NewLC of the CBluetoothSocket class
//!				3. Pop and destroy the CBluetoothSocket object from the cleanup stack	
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Object created successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewLC		BT-USER-SOCK-PublicAPI-Unconnected-0003-0001command2NewLC
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0003



//!START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0004
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0004
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket using the Standard Bluetooth socket NewLC constructor, but with no session on the socket server
//!				Uses API elements: NewLC()1
//! @SYMTestActions    		1. Call the first NewLC of the CBluetoothSocket class without a session open on the socket server
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Leave, unable to create a socket
//! @SYMTestType		CIT
//!	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
//!			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
//!			COMMAND		CBluetoothSocket1	NewLC		BT-USER-SOCK-PublicAPI-Unconnected-0004-0001command1NewLC
//!			COMMAND		CBluetoothSocket1	~
//!	END_TEST_BLOCK	!PanicCode=0	!PanicString=KERN-EXEC
//!END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0004


//Constructor for Bluetooth blank socket, used for accepting incoming connections.


START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0005
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0005
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with a blank socket, using NewL constructor.
//!				Uses API elements: NewL()4
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Call the fourth NewL of the CBluetoothSocket class
//!				3. Destroy object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Object created successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0005-0001command2NewL
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0005



//!START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0006
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0006
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with a blank socket, but with no session on the socket server
//!				Uses API elements: NewL()4
//! @SYMTestActions    		1. Call the fourth NewL of the CBluetoothSocket class without a session open on the socket server
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Leave, unable to create a socket
//! @SYMTestType		CIT
//!	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
//!			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
//!			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0006-0001command1NewL
//!			COMMAND		CBluetoothSocket1	~
//!	END_TEST_BLOCK	!PanicCode=0	!PanicString=KERN-EXEC
//!END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0006



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0007
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0007
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with a blank socket, using NewLC constructor.
//!				Uses API elements: NewLC()4
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Call the fourth NewLC of the CBluetoothSocket class
//!				3. Pop and destroy the CBluetoothSocket object from the cleanup stack
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Object created successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewLC		BT-USER-SOCK-PublicAPI-Unconnected-0007-0001command2NewLC
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0007



//!START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0008
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0008
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with a blank socket, but with no session on the socket server
//!				Uses API elements: NewLC()4
//! @SYMTestActions    		1. Call the fourth NewLC of the CBluetoothSocket class without a session open on the socket server
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Leave, unable to create a socket
//! @SYMTestType		CIT
//!	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
//!			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
//!			COMMAND		CBluetoothSocket1	NewLC		BT-USER-SOCK-PublicAPI-Unconnected-0008-0001command1NewLC
//!			COMMAND		CBluetoothSocket1	~
//!	END_TEST_BLOCK	!PanicCode=0	!PanicString=KERN-EXEC
//!END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0008



// Options
// SockType 	: KSockStream, KSockDatagram, KSockSeqPacket, KSockRaw
// Protocol 	: KL2CAP, KRFCOMM, KSD, KAVCTP, KTCIL2CAP
// Port		: RFCOMM 1-30 & KRfcommPassiveAutoBind, KL2CAPPassiveAutoBind,


START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0009
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0009
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		20/03/2006
//! @SYMTestCaseDesc		Set up a Bluetooth endpoint
//!				Uses API elements: NewL()1, Bind, listen()1
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewL()1 with  KSockStream and KRFCOMM
//!				3. Create and instantiate a TBTSockAddr class
//!				4. Create a TBTServiceSecurity object and set all security settings to false
//!				5. Set the security of TBTSockAddr to the TBTServiceSecurity object
//!				6. Set the port of the TBTSockAddr to 1 (RFCOMM range is 1-30)
//!				7. Use the Bind method of the CBluetoothSocket to bind the TBTSockAddr to the Bluetooth object
//!				8. Call the listen1 method of the CBluetoothSocket object
//!				9. Do socket cleanup
//!				10. Delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	No errors found
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TBTSockAddr	TBTSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0009-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TBTSockAddr1	Construct
			COMMAND		TBTSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0009-0001command7SetSecurity
			COMMAND		TBTSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0009-0001command8SetBTAddr
			COMMAND		TBTSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0009-0001command9SetPort
			COMMAND		TBTSockAddr1	BTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0009-0001command10BTAddr
			COMMAND		CBluetoothSocket1	Bind		BT-USER-SOCK-PublicAPI-Unconnected-0009-0001command12Bind
			COMMAND		CBluetoothSocket1	Listen		BT-USER-SOCK-PublicAPI-Unconnected-0009-0001command13Listen
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0009



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0010
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0010
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		20/03/2006
//! @SYMTestCaseDesc		Set up a Bluetooth endpoint
//!				Uses API elements: NewLC()1, SetLocalport, listen()2,LocalPort 
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewLC()1 with KSockStream and KRFCOMM
//!				3. Use SetLocalport to bind with only port set use port 32
//!				4. Call the listen2 method of the CBluetoothSocket object
//!				5. Find out and verify the local port that has been allocated using LocalPort method
//!				6. Do socket cleanup
//!				7. Delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	No errors found
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewLC		BT-USER-SOCK-PublicAPI-Unconnected-0010-0001command2NewLC
			COMMAND		CBluetoothSocket1	SetLocalPort		BT-USER-SOCK-PublicAPI-Unconnected-0010-0001command3SetLocalPort
			COMMAND		CBluetoothSocket1	LocalPort
			COMMAND	!Error=-5	CBluetoothSocket1	Listen		BT-USER-SOCK-PublicAPI-Unconnected-0010-0001command5Listen
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0010



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0011
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0011
//! @SYMAPI			CBluetoothSocket 
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		27/03/2006
//! @SYMTestCaseDesc		Set up a Bluetooth endpoint
//!				Uses API elements: NewL()1, Bind, Listen()3
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewL()1 with  KSockStream and KRFCOMM
//!				3. Create and instantiate a TBTSockAddr class
//!				4. Create a TBTServiceSecurity object and set all security settings to false
//!				5. Set the security of TBTSockAddr to the TBTServiceSecurity object
//!				6. Set the port of the TBTSockAddr to 30 (RFCOMM range is 1-30)
//!				7. Use the Bind method of the CBluetoothSocket to bind the TBTSockAddr to the Bluetooth object
//!				8. Call the listen()3 method of the CBluetoothSocket object
//!				9. Do socket cleanup
//!				10. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	No errors found
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TBTSockAddr	TBTSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0011-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TBTSockAddr1	Construct
			COMMAND		TBTSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0011-0001command7SetSecurity
			COMMAND		TBTSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0011-0001command8SetBTAddr
			COMMAND		TBTSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0011-0001command9SetPort
			COMMAND		CBluetoothSocket1	Bind		BT-USER-SOCK-PublicAPI-Unconnected-0011-0001command11Bind
			COMMAND		CBluetoothSocket1	Listen		BT-USER-SOCK-PublicAPI-Unconnected-0011-0001command12Listen
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0011



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0012
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0012
//! @SYMAPI			CBluetoothSocket 
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		27/03/2006
//! @SYMTestCaseDesc		Set up a Bluetooth endpoint and test options
//!				Uses API elements: NewL()1, Bind, setOpt()1, setOpt()2, setOption(), getOpt()1, getOpt()2
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewL()1 with  KSockStream and KRFCOMM
//!				3. Create and instantiate a TBTSockAddr class
//!				4. Create a TBTServiceSecurity object and set all security settings to false
//!				5. Set the security of TBTSockAddr to the TBTServiceSecurity object
//!				6. Set the port of the TBTSockAddr to 16 (RFCOMM range is 1-30)
//!				7. Use the Bind method of the CBluetoothSocket to bind the TBTSockAddr to the Bluetooth object
//!				8. Use setOpt()1 to set an option as a integer value
//!				9. Use setOpt()2 to set an option as a descriptor value
//!				10. Use setOption to set an option as a descriptor value
//!				11. Use getOpt()1 to get the option value as an int, set in step 8 and verify it
//!				12. Use getOpt()1 to get the option value as an int, set in step 9 and verify it
//!				13. Use getOpt()2 to get the option value as a descriptor, set in step 10 and verify it
//!				14. Use localName to get the unique name of the socket and verify it?
//!				15. Do socket cleanup
//!				16. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	No errors found, options set and retrieved correctly
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TBTSockAddr	TBTSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TBTSockAddr1	Construct
			COMMAND		TBTSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command7SetSecurity
			COMMAND		TBTSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command8SetBTAddr
			COMMAND		CBluetoothSocket1	SetOption		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command10SetOption
			COMMAND		CBluetoothSocket1	GetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command11GetOpt
			COMMAND		CBluetoothSocket1	SetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command12SetOpt
			COMMAND		CBluetoothSocket1	GetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command13GetOpt
			COMMAND		CBluetoothSocket1	SetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command14SetOpt
			COMMAND		CBluetoothSocket1	GetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command15GetOpt
			COMMAND		CBluetoothSocket1	SetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command16SetOpt
			COMMAND		CBluetoothSocket1	GetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command17GetOpt
			COMMAND		CBluetoothSocket1	SetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command18SetOpt
			COMMAND		CBluetoothSocket1	GetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command19GetOpt
			COMMAND		CBluetoothSocket1	SetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command20SetOpt
			COMMAND		CBluetoothSocket1	GetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command21GetOpt
			COMMAND		CBluetoothSocket1	SetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command22SetOpt
			COMMAND		CBluetoothSocket1	GetOpt		BT-USER-SOCK-PublicAPI-Unconnected-0012-0001command23GetOpt
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0012



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0013
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0013
//! @SYMAPI			CBluetoothSocket 
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		27/03/2006
//! @SYMTestCaseDesc		Set up a Bluetooth endpoint to test transfer
//!				Uses API elements: NewL()1, Bind, Name, Transfer, Info
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewL()1 with  KSockStream and KRFCOMM
//!				3. Create and instantiate a TBTSockAddr class
//!				4. Create a TBTServiceSecurity object and set all security settings to false
//!				5. Set the security of TBTSockAddr to the TBTServiceSecurity object
//!				6. Set the port of the TBTSockAddr to 16 (RFCOMM range is 1-30)
//!				7. Use the Bind method of the CBluetoothSocket to bind the TBTSockAddr to the Bluetooth object
//!				8. Call Name to get the system name of the socket
//!				9. Create and start the second session on the socket server
//!				10. Use SetTransferAble to use SetOpt to conform to platsec requirments for transfer
//!				11. Call Transfer to transfer a socket from a socket server to the second one. 
//!				12. Call Info on the originating socket to verify the transfer, which returns KErrNone if the transfer failed, and KErrBadHandle if it succeeded. 
//!				13. Do socket cleanup
//!				14. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	KErrBadHandle found at step 10 indicating successful transfer
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	RSocket	RSocket1	
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		RSocket1	RSocketServerConnect
			COMMAND		RSocket1	RSocketOpen		BT-USER-SOCK-PublicAPI-Unconnected-0013-0001command2RSocketOpen
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0013-0001command5NewL
			COMMAND		CBluetoothSocket1	Transfer		BT-USER-SOCK-PublicAPI-Unconnected-0013-0001command6Transfer
			COMMAND		CBluetoothSocket1	Info		BT-USER-SOCK-PublicAPI-Unconnected-0013-0001command7Info
			COMMAND		CBluetoothSocket1	Name
			COMMAND	!Error=-8	RSocket1	Info
			COMMAND		RSocket1	RSocketClose
			COMMAND		RSocket1	RSocketServerClose
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0013


// Client side unconnected tests



// Construction using Bluetooth socket named protocol 


START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0018
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0018
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with a named protocol, using NewL constructor.
//!				Uses API elements: NewL()3 
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Call the third NewL of the CBluetoothSocket class
//!				3. Destroy object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Object created successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0018-0001command2NewL
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0018



//!START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0019
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0019
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with a named protocol, but with no session on the socket server
//!				Uses API elements: NewL()3 
//! @SYMTestActions    		1. Call the third NewL of the CBluetoothSocket class without a session open on the socket server
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Leave, unable to create a socket
//! @SYMTestType		CIT
//!	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
//!			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
//!			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0019-0001command1NewL
//!			COMMAND		CBluetoothSocket1	~
//!	END_TEST_BLOCK	!PanicCode=0	!PanicString=KERN-EXEC
//!END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0019



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0020
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0020
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with a named protocol, using NewLC constructor.
//!				Uses API elements: NewLC()3 
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Call the third NewLC of the CBluetoothSocket class
//!				3. Pop and destroy the CBluetoothSocket object from the cleanup stack
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Object created successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewLC		BT-USER-SOCK-PublicAPI-Unconnected-0020-0001command2NewLC
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0020



//!START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0021
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0021
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with a named protocol, but with no session on the socket server
//!				Uses API elements: NewLC()3 
//! @SYMTestActions    		1. Call the third NewLC of the CBluetoothSocket class without a session open on the socket server
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Leave, unable to create a socket
//! @SYMTestType		CIT
//!	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
//!			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
//!			COMMAND		CBluetoothSocket1	NewLC		BT-USER-SOCK-PublicAPI-Unconnected-0021-0001command1NewLC
//!			COMMAND		CBluetoothSocket1	~
//!	END_TEST_BLOCK	!PanicCode=0	!PanicString=KERN-EXEC
//!END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0021



//Constructor for Bluetooth socket using an existing RSocket instance.



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0022
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0022
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with an existing RSocket instance, using NewL constructor.
//!				Uses API elements: NewL()5 
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. A Socket is open and is set as "Transferable" through the KSOEnableTransfer SetOpt
//!				3. Call the fifth NewL of the CBluetoothSocket class
//!				4. Destroy object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Object created successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	RSocket	RSocket1	
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		RSocket1	RSocketServerConnect
			COMMAND		RSocket1	RSocketOpen		BT-USER-SOCK-PublicAPI-Unconnected-0022-0001command2RSocketOpen
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0022-0001command5NewL
			COMMAND		CBluetoothSocket1	Info
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
			COMMAND	!Error=-8	RSocket1	Info
			COMMAND		RSocket1	RSocketClose
			COMMAND		RSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0022



//!START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0023
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0023
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with an existing RSocket instance, but with no session on the socket server
//!				Uses API elements: NewL()5 
//! @SYMTestActions    		1. Call the fifth NewL of the CBluetoothSocket class without a session open on the socket server
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Leave, unable to create a socket
//! @SYMTestType		CIT
//!	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
//!			CREATE_OBJECT	RSocket	RSocket1	
//!			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
//!			COMMAND		RSocket1	RSocketServerConnect
//!			COMMAND		CBluetoothSocket1	RSocketServerConnect
//!			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0023-0001command4NewL
//!			COMMAND		CBluetoothSocket1	~
//!			COMMAND		CBluetoothSocket1	RSocketServerClose
//!			COMMAND		RSocket1	RSocketClose
//!			COMMAND		RSocket1	RSocketServerClose
//!	END_TEST_BLOCK	!PanicCode=0	!PanicString=KERN-EXEC
//!END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0023



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0024
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0024
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with an existing RSocket instance, using NewLC constructor.
//!				Uses API elements: NewL()5 
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. A Socket is open and is set as "Transferable" through the KSOEnableTransfer SetOpt
//!				3. Call the fifth NewLC of the CBluetoothSocket class
//!				4. Pop and destroy the CBluetoothSocket object from the cleanup stack
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Object created successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	RSocket	RSocket1	
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		RSocket1	RSocketServerConnect
			COMMAND		RSocket1	RSocketOpen		BT-USER-SOCK-PublicAPI-Unconnected-0024-0001command2RSocketOpen
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewLC		BT-USER-SOCK-PublicAPI-Unconnected-0024-0001command5NewLC
			COMMAND		CBluetoothSocket1	Info
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
			COMMAND	!Error=-8	RSocket1	Info
			COMMAND		RSocket1	RSocketClose
			COMMAND		RSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0024



//!START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0025
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0025
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		16/03/2006
//! @SYMTestCaseDesc		Create a CBluetoothSocket with an existing RSocket instance, but with no session on the socket server
//!				Uses API elements: NewLC()5 
//! @SYMTestActions    		1. Call the fifth NewLC of the CBluetoothSocket class without a session open on the socket server
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Leave, unable to create a socket
//! @SYMTestType		CIT
//!	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
//!			CREATE_OBJECT	RSocket	RSocket1	
//!			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
//!			COMMAND		RSocket1	RSocketServerConnect
//!			COMMAND		CBluetoothSocket1	RSocketServerConnect
//!			COMMAND		CBluetoothSocket1	NewLC		BT-USER-SOCK-PublicAPI-Unconnected-0025-0001command4NewLC
//!			COMMAND		CBluetoothSocket1	~
//!			COMMAND		CBluetoothSocket1	RSocketServerClose
//!			COMMAND		RSocket1	RSocketClose
//!			COMMAND		RSocket1	RSocketServerClose
//!	END_TEST_BLOCK	!PanicCode=0	!PanicString=KERN-EXEC
//!END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0025



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0026
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0026
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		06/04/2006
//! @SYMTestCaseDesc		Verify that the MBluetoothSocketNotifier MBSN_ExtensionInterfaceL method can be called.
//!				Uses API elements: NewL(), MBSN_ExtensionInterfaceL(), Shutdown()2
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Call the first NewL of the CBluetoothSocket class
//!				3. Call MBSN_ExtensionInterfaceL MBluetoothSocketNotifier and verify that the pointer returned is null
//!				4. Destroy object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	MBSN_ExtensionInterfaceL method called and returns a null pointer
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0026-0001command2NewL
			COMMAND		CBluetoothSocket1	TestMBSN_ExtensionInterfaceL		BT-USER-SOCK-PublicAPI-Unconnected-0026-0001command3TestMBSN_ExtensionInterfaceL
			COMMAND		CBluetoothSocket1	Shutdown		BT-USER-SOCK-PublicAPI-Unconnected-0026-0001command4Shutdown
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0026



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0027
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0027
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		27/03/2006
//! @SYMTestCaseDesc		Call Listen()2 that is not supported in right context 
//!				Uses API elements: NewL()1, Bind, listen()2, Shutdown()1, 
//!				HandleShutdownCompleteL
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewL()1 (Standard constructor)
//!				3. Create an TRfcommSockAddr object
//!				4. Set the Bluetooth address to the one of the Casira pod connected to this slave
//!				5. Set the Family to Bluetooth (257)
//!				6. Set the port to the one matching the protocol to use
//!				7. Use the Bind method of the CBluetoothSocket to bind the socket using the TRfcommSockAddr object
//!				8. Call the listen()2 method of the CBluetoothSocket object
//!				9. Do socket cleanup by calling Shutdown()1
//!				10. HandleShutdownCompleteL gets called verify error code
//!				11. delete CBluetoothSocket object
//!				Synchronization point
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Listen()2 Returns errorcode -5 (not supported)
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSessionSocket	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0027-0001command2NewL
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0027-0001command5SetBTAddr
			COMMAND		TRfcommSockAddr1	SetFamily		BT-USER-SOCK-PublicAPI-Unconnected-0027-0001command6SetFamily
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0027-0001command7SetPort
			COMMAND		CBluetoothSocket1	Bind		BT-USER-SOCK-PublicAPI-Unconnected-0027-0001command9Bind
			COMMAND	!Error=-5	CBluetoothSocket1	Listen		BT-USER-SOCK-PublicAPI-Unconnected-0027-0001command10Listen
			DELAY	30000
			COMMAND		CBluetoothSocket1	Shutdown		BT-USER-SOCK-PublicAPI-Unconnected-0027-0001command12Shutdown
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0027



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0028
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0028
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		27/03/2006
//! @SYMTestCaseDesc		Call RecvFrom which will not work as Symbian has no connectionless Bluetooth
//!				Uses API elements: NewL()1, Bind, listen()1, LocalPort, NewL()4, RecvFrom()1, 
//!				HandleReceiveCompleteL, Shutdown()1, 
//!				HandleShutdownCompleteL
//! @SYMTestActions    		Wait for master to order start
//!				1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewL()1 (Standard constructor)
//!				3. Create an TRfcommSockAddr object
//!				4. Set the Bluetooth address to the one of the Casira pod connected to this slave
//!				5. Set the Family to Bluetooth (257)
//!				6. Set the port to the one matching the protocol to use
//!				7. Read data sent to socket using RecvFrom()1
//!				8. HandleReceiveCompleteL gets called when we finished receiving data, verify data received
//!				Synchronization point
//!				9. Do socket cleanup by calling Shutdown()1
//!				10. HandleShutdownCompleteL gets called verify error code
//!				11. delete CBluetoothSocket object
//!				Synchronization point
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Bluetooth endpoint set up successfully, data received successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0028-0001command2NewL
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0028-0001command5SetBTAddr
			COMMAND		TRfcommSockAddr1	SetFamily		BT-USER-SOCK-PublicAPI-Unconnected-0028-0001command6SetFamily
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0028-0001command7SetPort
			COMMAND	!AsyncError=-18	CBluetoothSocket1	RecvFrom		BT-USER-SOCK-PublicAPI-Unconnected-0028-0001command9RecvFrom
			OUTSTANDING
			COMMAND		CBluetoothSocket1	CancelRecv
			COMMAND		CBluetoothSocket1	Shutdown		BT-USER-SOCK-PublicAPI-Unconnected-0028-0001command11Shutdown
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0028



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0029
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0029
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		27/03/2006
//! @SYMTestCaseDesc		Call RecvFrom2 which will not work as Symbian has no connectionless Bluetooth
//!				Uses API elements: NewL()1, Bind, listen()1, LocalPort, RecvFrom()2, 
//!				HandleReceiveCompleteL, Shutdown()1, 
//!				HandleShutdownCompleteL
//! @SYMTestActions    		Wait for master to order start
//!				1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewL()1 (Standard constructor)
//!				3. Create an TRfcommSockAddr object
//!				4. Set the Bluetooth address to the one of the Casira pod connected to this slave
//!				5. Set the Family to Bluetooth (257)
//!				6. Set the port to the one matching the protocol to use
//!				7. Read data sent to socket using RecvFrom()2
//!				8. HandleReceiveCompleteL gets called when we finished receiving data, verify data received
//!				Synchronization point
//!				9. Do socket cleanup by calling Shutdown()1
//!				10. HandleShutdownCompleteL gets called verify error code
//!				11. delete CBluetoothSocket object
//!				Synchronization point
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Bluetooth endpoint set up successfully, data received successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0029-0001command2NewL
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0029-0001command5SetBTAddr
			COMMAND		TRfcommSockAddr1	SetFamily		BT-USER-SOCK-PublicAPI-Unconnected-0029-0001command6SetFamily
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0029-0001command7SetPort
			COMMAND	!AsyncError=-18	CBluetoothSocket1	RecvFrom		BT-USER-SOCK-PublicAPI-Unconnected-0029-0001command9RecvFrom
			OUTSTANDING
			COMMAND		CBluetoothSocket1	CancelRecv
			COMMAND		CBluetoothSocket1	Shutdown		BT-USER-SOCK-PublicAPI-Unconnected-0029-0001command11Shutdown
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0029



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0030
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0030
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		27/03/2006
//! @SYMTestCaseDesc		Call SendTo1 which will not work as Symbian has no connectionless Bluetooth
//!				Uses API elements: NewL()1, Connect()1, HandleConnectCompleteL, Send()1, HandleSendCompleteL
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()1 (Standard constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr 
//!				6. Set the BT address of the TRfcommSockAddr to the one of the Casira pod of the slave that we connect to
//!				7. Set the port to the specific one of the protocol we use
//!				8. Verify the set BT Address
//!				9. Send data using SendTo()1
//!				10. Do socket cleanup
//!				11. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Connection setup successfully and data sent successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0030-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0030-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0030-0001command8SetBTAddr
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0030-0001command9SetPort
			COMMAND		TRfcommSockAddr1	BTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0030-0001command10BTAddr
			COMMAND	!AsyncError=-18	CBluetoothSocket1	SendTo		BT-USER-SOCK-PublicAPI-Unconnected-0030-0001command12SendTo
			OUTSTANDING
			COMMAND		CBluetoothSocket1	Shutdown		BT-USER-SOCK-PublicAPI-Unconnected-0030-0001command13Shutdown
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0030



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0031
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0031
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			Johan Eriksson
//! @SYMCreationDate		27/03/2006
//! @SYMTestCaseDesc		Call SendTo2 which will not work as Symbian has no connectionless Bluetooth
//!				Uses API elements: NewL()1, Connect()1, HandleConnectCompleteL, Send()1, HandleSendCompleteL
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()1 (Standard constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr 
//!				6. Set the BT address of the TRfcommSockAddr to the one of the Casira pod of the slave that we connect to
//!				7. Set the port to the specific one of the protocol we use
//!				8. Verify the set BT Address
//!				9. Send data using SendTo()2
//!				10. Do socket cleanup
//!				11. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Connection setup successfully and data sent successfully
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0031-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0031-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0031-0001command8SetBTAddr
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0031-0001command9SetPort
			COMMAND		TRfcommSockAddr1	BTAddr
			COMMAND	!AsyncError=-18	CBluetoothSocket1	SendTo		BT-USER-SOCK-PublicAPI-Unconnected-0031-0001command12SendTo
			OUTSTANDING
			COMMAND		CBluetoothSocket1	Shutdown		BT-USER-SOCK-PublicAPI-Unconnected-0031-0001command13Shutdown
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0031



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0032
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0032
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		07/08/2006
//! @SYMTestCaseDesc		Call SendTo1 while already sending
//!				Uses API elements: NewL()1, Connect()1, HandleConnectCompleteL, SendTo()1, HandleSendCompleteL
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()1 (Standard constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr 
//!				6. Set the BT address of the TRfcommSockAddr to the one of the Casira pod of the slave that we connect to
//!				7. Set the port to the specific one of the protocol we use
//!				8. Verify the set BT Address
//!				9. Send data using SendTo()1
//!				10. Immediately send data using SendTo()1 again
//!				11. Do socket cleanup
//!				12. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Connection setup successfully and SendTo returns KErrInUse
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0032-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0032-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0032-0001command8SetBTAddr
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0032-0001command9SetPort
			COMMAND		TRfcommSockAddr1	BTAddr
			COMMAND	!Error=-14	!AsyncError=-18	CBluetoothSocket1	SendTo		BT-USER-SOCK-PublicAPI-Unconnected-0032-0001command12SendTo
			OUTSTANDING
			COMMAND		CBluetoothSocket1	Shutdown		BT-USER-SOCK-PublicAPI-Unconnected-0032-0001command13Shutdown
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0032



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0033
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0033
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		07/08/2006
//! @SYMTestCaseDesc		Call SendTo2 while already sending
//!				Uses API elements: NewL()1, Connect()1, HandleConnectCompleteL, SendTo()2, HandleSendCompleteL
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()1 (Standard constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr 
//!				6. Set the BT address of the TRfcommSockAddr to the one of the Casira pod of the slave that we connect to
//!				7. Set the port to the specific one of the protocol we use
//!				8. Verify the set BT Address
//!				9. Send data using SendTo()2
//!				10. Immediately send data using SendTo()2 again
//!				11. Do socket cleanup
//!				12. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Connection setup successfully and SendTo returns KErrInUse
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0033-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0033-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0033-0001command8SetBTAddr
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0033-0001command9SetPort
			COMMAND		TRfcommSockAddr1	BTAddr
			COMMAND	!Error=-14 !AsyncError=-18	CBluetoothSocket1	SendTo		BT-USER-SOCK-PublicAPI-Unconnected-0033-0001command12SendTo
			OUTSTANDING
			COMMAND		CBluetoothSocket1	Shutdown		BT-USER-SOCK-PublicAPI-Unconnected-0033-0001command13Shutdown
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0033



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0035
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0035
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		07/08/2006
//! @SYMTestCaseDesc		Try setting local port to 0
//!				Uses API elements: NewLC()1, SetLocalport
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewLC()1 with KSockStream and KRFCOMM
//!				3. Use SetLocalport to bind with only port set use port 0
//!				4. Do socket cleanup
//!				5. Delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Error KErrRfcommBadAddress is returned by SetLocalport
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewLC		BT-USER-SOCK-PublicAPI-Unconnected-0035-0001command2NewLC
			COMMAND	!Error=-6352	CBluetoothSocket1	SetLocalPort		BT-USER-SOCK-PublicAPI-Unconnected-0035-0001command3SetLocalPort
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0035



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0036
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0036
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		07/08/2006
//! @SYMTestCaseDesc		Try to listen without calling Bind() first
//!				Uses API elements: NewL()1, listen()1
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewL()1 with  KSockStream and KRFCOMM
//!				3. Create and instantiate a TBTSockAddr class
//!				4. Create a TBTServiceSecurity object and set all security settings to false
//!				5. Set the security of TBTSockAddr to the TBTServiceSecurity object
//!				6. Set the port of the TBTSockAddr to 1 (RFCOMM range is 1-30)
//!				7. Call the listen1 method of the CBluetoothSocket object
//!				8. Do socket cleanup
//!				9. Delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Error KErrBadName is returned by Listen()
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TBTSockAddr	TBTSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0036-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TBTSockAddr1	Construct
			COMMAND		TBTSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0036-0001command7SetSecurity
			COMMAND		TBTSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0036-0001command8SetBTAddr
			COMMAND		TBTSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0036-0001command9SetPort
			COMMAND	!Error=-28	CBluetoothSocket1	Listen		BT-USER-SOCK-PublicAPI-Unconnected-0036-0001command11Listen
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0036



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0037
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0037
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		07/08/2006
//! @SYMTestCaseDesc		Try to listen without calling Bind() first
//!				Uses API elements: NewL()1, listen()2
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewL()1 with  KSockStream and KRFCOMM
//!				3. Create and instantiate a TBTSockAddr class
//!				4. Create a TBTServiceSecurity object and set all security settings to false
//!				5. Set the security of TBTSockAddr to the TBTServiceSecurity object
//!				6. Set the port of the TBTSockAddr to 1 (RFCOMM range is 1-30)
//!				7. Call the listen2 method of the CBluetoothSocket object
//!				8. Do socket cleanup
//!				9. Delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Error KErrBadName is returned by Listen()
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TBTSockAddr	TBTSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0037-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TBTSockAddr1	Construct
			COMMAND		TBTSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0037-0001command7SetSecurity
			COMMAND		TBTSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0037-0001command8SetBTAddr
			COMMAND		TBTSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0037-0001command9SetPort
			COMMAND	!Error=-28	CBluetoothSocket1	Listen		BT-USER-SOCK-PublicAPI-Unconnected-0037-0001command11Listen
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0037



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0038
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0038
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		07/08/2006
//! @SYMTestCaseDesc		Try to listen without calling Bind() first
//!				Uses API elements: NewL()1, listen()3
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Create a CBluetoothSocket using the NewL()1 with  KSockStream and KRFCOMM
//!				3. Create and instantiate a TBTSockAddr class
//!				4. Create a TBTServiceSecurity object and set all security settings to false
//!				5. Set the security of TBTSockAddr to the TBTServiceSecurity object
//!				6. Set the port of the TBTSockAddr to 1 (RFCOMM range is 1-30)
//!				7. Call the listen3 method of the CBluetoothSocket object
//!				8. Do socket cleanup
//!				9. Delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Error KErrBadName is returned by Listen()
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TBTSockAddr	TBTSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0038-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TBTSockAddr1	Construct
			COMMAND		TBTSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0038-0001command7SetSecurity
			COMMAND		TBTSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0038-0001command8SetBTAddr
			COMMAND		TBTSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0038-0001command9SetPort
			COMMAND	!Error=-28	CBluetoothSocket1	Listen		BT-USER-SOCK-PublicAPI-Unconnected-0038-0001command11Listen
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0038



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0039
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0039
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		07/08/2006
//! @SYMTestCaseDesc		Try to shutdown while already shutting down.
//!				Uses API elements: NewL(), Shutdown()1
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Call the first NewL of the CBluetoothSocket class
//!				3. Call shutdown()1
//!				4. Immediately call shutdown()1 again
//!				5. Destroy object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	The second shutdown returns error KErrInUse
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0039-0001command2NewL
			COMMAND	!Error=-14	CBluetoothSocket1	Shutdown		BT-USER-SOCK-PublicAPI-Unconnected-0039-0001command3Shutdown
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0039



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0040
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0040
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		07/08/2006
//! @SYMTestCaseDesc		Try to shutdown while already shutting down.
//!				Uses API elements: NewL(), Shutdown()2
//! @SYMTestActions    		1. Create and start a session on the socket server
//!				2. Call the first NewL of the CBluetoothSocket class
//!				3. Call shutdown()2
//!				4. Immediately call shutdown()2 again
//!				5. Destroy object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	The second shutdown returns error KErrInUse
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0040-0001command2NewL
			COMMAND	!Error=-14	CBluetoothSocket1	Shutdown		BT-USER-SOCK-PublicAPI-Unconnected-0040-0001command3Shutdown
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0040



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0041
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0041
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		10/08/2006
//! @SYMTestCaseDesc		Call Connect1 with the Address of a none existing device
//!				Uses API elements: NewL()1, Connect()1, HandleConnectCompleteL
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()1 (Standard constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr (Use default/empty as on server)
//!				6. Set the port to the specific one of the protocol we use
//!				7. Connect to an unknown address
//!				8. HandleConnectCompleteL gets called indicating that connecting the BT connection completed with error EPageTimedOut
//!				9. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Connect fails with error EPageTimedOut
//! @SYMTestType		CIT
	START_TEST_BLOCK	100	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0041-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0041-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0041-0001command8SetBTAddr
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0041-0001command9SetPort
			COMMAND		TRfcommSockAddr1	BTAddr
			COMMAND	!AsyncError=-6004	CBluetoothSocket1	Connect		BT-USER-SOCK-PublicAPI-Unconnected-0041-0001command12Connect
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0041



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0042
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0042
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		10/08/2006
//! @SYMTestCaseDesc		Call LocalName on blank unconnected socket
//!				Uses API elements: NewL()9, LocalName
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()9 (Blank constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr (Use default/empty as on server)
//!				6. Set the port to the specific one of the protocol we use
//!				7. Call LocalName
//!				8. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	LocalName causes a ESOCK panic code 17
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0042-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0042-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0042-0001command8SetPort
			COMMAND		CBluetoothSocket1	LocalName
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK	!PanicCode=17	!PanicString=ESock_client
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0042



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0043
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0043
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		10/08/2006
//! @SYMTestCaseDesc		Call LocalPort on blank unconnected socket
//!				Uses API elements: NewL()9, LocalPort
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()9 (Blank constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr (Use default/empty as on server)
//!				6. Set the port to the specific one of the protocol we use
//!				7. Call LocalPort
//!				8. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	LocalPort causes a ESOCK panic code 17
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0043-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0043-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0043-0001command8SetPort
			COMMAND		CBluetoothSocket1	LocalPort
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK	!PanicCode=17	!PanicString=ESock_client
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0043






START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0045
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0045
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		10/08/2006
//! @SYMTestCaseDesc		Call Name on blank unconnected socket
//!				Uses API elements: NewL()9, Name
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()9 (Blank constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr (Use default/empty as on server)
//!				6. Set the port to the specific one of the protocol we use
//!				7. Call Name
//!				8. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Name is returned with no error
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0045-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0045-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0045-0001command8SetPort
			COMMAND		CBluetoothSocket1	Name
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0045


START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0047
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0047
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		10/08/2006
//! @SYMTestCaseDesc		Call AllowRoleSwitch on blank unconnected socket
//!				Uses API elements: NewL()9, AllowRoleSwitch
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()9 (Blank constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr (Use default/empty as on server)
//!				6. Set the port to the specific one of the protocol we use
//!				7. Call AllowRoleSwitch
//!				8. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	AllowRoleSwitch returns with error KErrNotReady
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0047-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0047-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0047-0001command8SetPort
			COMMAND	!Error=-18	CBluetoothSocket1	AllowRoleSwitch
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0047



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0048
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0048
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		10/08/2006
//! @SYMTestCaseDesc		Call PreventRoleSwitch on blank unconnected socket
//!				Uses API elements: NewL()9, PreventRoleSwitch
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()9 (Blank constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr (Use default/empty as on server)
//!				6. Set the port to the specific one of the protocol we use
//!				7. Call PreventRoleSwitch
//!				8. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	PreventRoleSwitch returns with error KErrNotReady
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0048-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0048-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0048-0001command8SetPort
			COMMAND	!Error=-18	CBluetoothSocket1	PreventRoleSwitch
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0048



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0049
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0049
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		10/08/2006
//! @SYMTestCaseDesc		Call Connect2 with the Address of a none existing device
//!				Uses API elements: NewL()1, Connect()2, HandleConnectCompleteL
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()1 (Standard constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr (Use default/empty as on server)
//!				6. Set the port to the specific one of the protocol we use
//!				7. Connect to an unknown address
//!				8. HandleConnectCompleteL gets called indicating that connecting the BT connection completed with error EPageTimedOut
//!				9. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Connect fails with error EPageTimedOut
//! @SYMTestType		CIT
	START_TEST_BLOCK	100	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0049-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0049-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0049-0001command8SetBTAddr
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0049-0001command9SetPort
			COMMAND		TRfcommSockAddr1	BTAddr
			COMMAND	!AsyncError=-6004	CBluetoothSocket1	Connect		BT-USER-SOCK-PublicAPI-Unconnected-0049-0001command12Connect
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0049



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0050
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0050
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		10/08/2006
//! @SYMTestCaseDesc		Call Connect3 with the Address of a none existing device
//!				Uses API elements: NewL()1, Connect()3, HandleConnectCompleteL
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()1 (Standard constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr (Use default/empty as on server)
//!				6. Set the port to the specific one of the protocol we use
//!				7. Connect to an unknown address
//!				8. HandleConnectCompleteL gets called indicating that connecting the BT connection completed with error EPageTimedOut
//!				9. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Connect fails with error EPageTimedOut
//! @SYMTestType		CIT
	START_TEST_BLOCK	100	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0050-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0050-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0050-0001command8SetBTAddr
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0050-0001command9SetPort
			COMMAND		TRfcommSockAddr1	BTAddr
			COMMAND	!AsyncError=-6004	CBluetoothSocket1	Connect		BT-USER-SOCK-PublicAPI-Unconnected-0050-0001command12Connect
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0050



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0051
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0051
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/08/2006
//! @SYMTestCaseDesc		Call Send1 without calling connect
//!				Uses API elements: NewL()1, Send()1, HandleConnectCompleteL
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()1 (Standard constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr (Use default/empty as on server)
//!				6. Set the port to the specific one of the protocol we use
//!				7. Call Send1
//!				8. HandleSendCompleteL returns error KErrNotReady
//!				9. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	Send fails with error KErrNotReady
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0051-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0051-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetBTAddr		BT-USER-SOCK-PublicAPI-Unconnected-0051-0001command8SetBTAddr
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0051-0001command9SetPort
			COMMAND		TRfcommSockAddr1	BTAddr
			COMMAND	!AsyncError=-18	CBluetoothSocket1	Send		BT-USER-SOCK-PublicAPI-Unconnected-0051-0001command12Send
			OUTSTANDING
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0051



START_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0044
//! @SYMTestCaseID		BT-USER-SOCK-PublicAPI-Unconnected-0044
//! @SYMAPI			CBluetoothSocket
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		10/08/2006
//! @SYMTestCaseDesc		Call RemoteName on blank unconnected socket
//!				Uses API elements: NewL()9, RemoteName
//! @SYMTestActions		1. Create a connection to the RSocket server
//!				2. Create the CBluetoothSocket object using NewL()9 (Blank constructor)
//!				3. Create an empty TBTServiceSecurity object
//!				4. Create a TRfcommSockAddr object
//!				5. Set the Security of the TRfcommSockAddr (Use default/empty as on server)
//!				6. Set the port to the specific one of the protocol we use
//!				7. Call RemoteName
//!				8. delete CBluetoothSocket object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults  	RemoteName causes a ESOCK panic code 17
//! @SYMTestType		CIT
	START_TEST_BLOCK	10	T_BTSockAPI	\bluetooth\BT-USER-SOCK-PublicApi-Unconnected.ini
			CREATE_OBJECT	CBluetoothSocket	CBluetoothSocket1	
			CREATE_OBJECT	TRfcommSockAddr	TRfcommSockAddr1	
			CREATE_OBJECT	TBTServiceSecurity	TBTServiceSecurity1	
			COMMAND		CBluetoothSocket1	RSocketServerConnect
			COMMAND		CBluetoothSocket1	NewL		BT-USER-SOCK-PublicAPI-Unconnected-0044-0001command2NewL
			COMMAND		TBTServiceSecurity1	Construct
			COMMAND		TRfcommSockAddr1	Construct
			COMMAND		TRfcommSockAddr1	SetSecurity		BT-USER-SOCK-PublicAPI-Unconnected-0044-0001command7SetSecurity
			COMMAND		TRfcommSockAddr1	SetPort		BT-USER-SOCK-PublicAPI-Unconnected-0044-0001command8SetPort
			COMMAND		CBluetoothSocket1	RemoteName
			COMMAND		CBluetoothSocket1	~
			COMMAND		CBluetoothSocket1	RSocketServerClose
	END_TEST_BLOCK	!PanicCode=17	!PanicString=ESock_client
END_TESTCASE BT-USER-SOCK-PublicAPI-Unconnected-0044
